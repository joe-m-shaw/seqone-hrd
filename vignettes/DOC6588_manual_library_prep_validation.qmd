---
title: "Validation of Manual setup of SeqOne Homologous Recombination Deficiency Testing"
format: 
  docx:
    reference-doc: "C:/Users/joseph.shaw2/Documents/pansolid_cnv_validation/vignettes/north_west_glh_document_template.docx"
    link-citations: true
toc: true
toc-title: "Table of Contents"
bibliography: hrd_library.bib
csl: harvard-manchester-metropolitan-university.csl
fig-align: "left"
fig-width: 6
---

{{< pagebreak >}}

# Authors

Authors: Joe Shaw (CS20980) and Jack Ritson

Author contact: joseph.shaw2\@mft.nhs.uk; john.ritson\@mft.nhs.uk

Date: `r Sys.Date()`

# Purpose

The purpose of this document is to describe the validation of a manual library
preparation method for the Agilent Sureselect HS2 library enrichment, which can
be used for the testing of ovarian cancer samples by the SomaHRD pipeline 
(SeqOne).

```{r}
#| label: packages
#| include: FALSE

library(tidyverse)
library(here)
library(ggpubr)
library(readxl)

source(here("functions/hrd_functions.R"))

data_path <- config::get("data_filepath")

```

# Introduction

HRD testing was validated using an automated library preparation on the
Agilent Bravo platform ([DOC6192]{custom-style="Strong"}).

A manual method is required because one of the Agilent Bravo liquid handling
stations is being removed. A manual method is required as a backup in case the
remaining Agilent Bravo breaks.

# Methods

```{r}
#| label: manual-prep-data
#| include: FALSE

manual_prep_files <- list.files(path = paste0(data_path,
                                         "validation/",
                                         "DOC6588_manual_library_prep/",
                                         "seqone_reports/"),
                              pattern = "*.csv",
                              full.names = TRUE)

manual_prep_data <- manual_prep_files |> 
  map(\(manual_prep_files) read_seqone_csv(manual_prep_files)) |> 
  list_rbind() |> 
  mutate(library_prep = "manual",
         labno = str_extract(string = sample,
                             pattern = "\\d{8}"),
         worksheet = str_extract(string = sample,
                                 pattern = "WS\\d{6}")) |> 
  relocate(labno, worksheet) |> 
  mutate(somahrd_semantic_version = case_when(
    somahrd_version == "v1.2" ~"v1.2.8",
    TRUE ~somahrd_version
  ),
  repeat_sample = ifelse(duplicated(labno), "repeat", ""))

labno_vector <- manual_prep_data$labno

sample_info <- read_csv(file = paste0(data_path,
                                      "validation/",
                                      "DOC6588_manual_library_prep/",
                                      "sample_info/",
                                      "labno_sample_info.csv"),
                        col_types = "cc")

```

```{r}
#| label: dna-concentrations
#| include: FALSE

hs2_prep_2023 <- read_excel(path = paste0(data_path,
                                          "validation/DOC6588_manual_library_prep/",
                                          "excel_spreadsheets/",
                                          "HS2 Sample Prep 2023 - NEW_copy.xlsx"),
                            skip = 1,
                            sheet = "HRD_SeqOne") |> 
  janitor::clean_names()

hs2_prep_2023_clean <- hs2_prep_2023 |> 
  filter(sample_id %in% labno_vector &
           !duplicated(sample_id)) |> 
  mutate(stock_qubit_ng_ul = as.numeric(stock_qubit_ng_ul),
         excel = "2023") |> 
    select(sample_id, stock_qubit_ng_ul, excel) 

hs2_prep_2024 <- read_excel(path = paste0(data_path,
                                          "validation/DOC6588_manual_library_prep/",
                                          "excel_spreadsheets/",
                                          "HS2 Sample Prep 2024 - USE 2025 SPREADSHEET_copy.xlsx"),
                            skip = 1,
                            sheet = "HRD_SeqOne") |> 
  janitor::clean_names()

hs2_prep_2024_clean <- hs2_prep_2024 |> 
  filter(sample_id %in% labno_vector &
           !duplicated(sample_id)) |> 
  mutate(stock_qubit_ng_ul = as.numeric(stock_qubit_ng_ul_fail_if_below_3_34),
         excel = "2024") |>
  select(sample_id, stock_qubit_ng_ul, excel) 

sample_dna_concentrations <- rbind(hs2_prep_2023_clean, hs2_prep_2024_clean) |>  
  arrange(sample_id) |> 
  filter(!duplicated(sample_id)) |> 
  rename(labno = sample_id)

```


```{r}
#| label: auto-prep-data
#| include: FALSE

qiasymphony_val_files <- list.files(path = paste0(data_path,
                                            "validation/DOC6255_qiasymphony/seqone_reports/"),
                              pattern = "*.csv",
                              full.names = TRUE)

qiasymphony_val_data <- qiasymphony_val_files |> 
  map(\(qiasymphony_val_files) read_seqone_csv(qiasymphony_val_files)) |> 
  list_rbind() |> 
  mutate(library_prep = "automated",
         labno = str_extract(string = sample,
                             pattern = "\\d{8}"),
         worksheet = str_extract(string = sample,
                                 pattern = "WS\\d{6}")) |> 
  relocate(labno, worksheet) |> 
  mutate(somahrd_semantic_version = "v1.2.1")

live_service_files <- list.files(path = paste0(data_path,
                                              "live_service/service/csv_reports/"),
                                 pattern = "*.csv",
                                 full.names = TRUE)

live_service_data <- live_service_files |> 
  map(\(live_service_files) read_seqone_csv(live_service_files)) |> 
  list_rbind() |> 
  mutate(library_prep = "automated",
         labno = str_extract(string = sample,
                             pattern = "\\d{8}"),
         worksheet = str_extract(string = sample,
                                 pattern = "WS\\d{6}")) |> 
  relocate(labno, worksheet) |> 
  mutate(somahrd_semantic_version = somahrd_version) |> 
    filter(labno %in% manual_prep_data$labno)
  
seqone_val_files_1 <- list.files(path = paste0(data_path,
                                            "live_service/INC9110/20240410_reanalysis/"),
                               pattern = "*.csv",
                               full.names = TRUE)

seqone_val_files_2 <- list.files(path = paste0(data_path,
                                            "live_service/INC9110/20240412_reanalysis/"),
                               pattern = "*.csv",
                               full.names = TRUE)

seqone_val_files <- c(seqone_val_files_1, seqone_val_files_2)

seqone_val_data <- seqone_val_files |> 
  map(\(seqone_val_files) read_seqone_csv(seqone_val_files)) |> 
  list_rbind() |> 
  mutate(library_prep = "automated",
         labno = str_extract(string = sample,
                             pattern = "\\d{8}"),
         worksheet = str_extract(string = sample,
                                 pattern = "WS\\d{6}")) |> 
  relocate(labno, worksheet) |> 
  mutate(somahrd_semantic_version = "v1.2.7") |> 
    filter(labno %in% manual_prep_data$labno)

auto_prep_data <- rbind(qiasymphony_val_data, live_service_data,
                        seqone_val_data) |> 
  mutate(repeat_sample = ifelse(duplicated(labno), "repeat", ""))

```

```{r}
#| label: organise-cohorts
#| include: FALSE

cohort_table <- tibble::tribble(
  ~cohort, ~`Description`, ~`DNA extraction method`, 
  ~`SomaHRD version`, ~`Myriad HRD result`, ~`Repeat testing`,
  "1",       "Samples from SeqOne SomaHRD validation (DOC6192)", 
  "Cobas",  "v1.2.7",  "Yes",  "Yes",
  "2",      "Samples from QIAsymphony extraction validation (DOC6255)", 
  "QIAsymphony",  "v1.2.1",  "Yes",  "No",
  "3",      "Samples from clinical SeqOne service",  
  "QIAsymphony", "Various (v1.2.1 to v1.2.13)",  "No",  "No"
)

manual_data_with_cohorts <- manual_prep_data |> 
  mutate(cohort = case_when(
    labno %in% seqone_val_data$labno ~"1",
    labno %in% qiasymphony_val_data$labno ~"2",
    labno %in% live_service_data$labno ~"3"
  )) |> 
  left_join(sample_info, by = "labno") 

cohort_counts <- manual_data_with_cohorts |> 
  group_by(cohort) |> 
  count()

tbl_cohorts <- cohort_counts |> 
  inner_join(cohort_table, by = "cohort") |> 
  rename(`Cohort` = cohort,
         `Samples` = n)

```

`r length(unique(manual_prep_data$labno))` samples were tested using the manual
library preparation method. FASTQs were analysed using the SomaHRD pipeline
versions 1.2.8 and 1.2.13. Samples were selected from 3 cohorts, shown in
@tbl-cohorts, with DNA concentrations ranging from 
`r round(min(sample_dna_concentrations$stock_qubit_ng_ul), 1)`
-
`r max(sample_dna_concentrations$stock_qubit_ng_ul)` ng/ul.

```{r}
#| label: tbl-cohorts
#| tbl-cap: "Validation sample cohorts"
#| echo: FALSE

knitr::kable(tbl_cohorts)

```

```{r}
#| label: auto-vs-manual
#| include: FALSE

auto_vs_manual_df_wide <- manual_prep_data |> 
  # Exclude data run with incorrect indexes
  filter(analysis_date != "2025-01-16") |> 
  inner_join(auto_prep_data, by = "labno",
             suffix = c("_manual", "_auto")) |> 
  select(labno, 
         worksheet_auto, worksheet_manual,
         analysis_date_auto, analysis_date_manual,
         somahrd_semantic_version_auto, somahrd_semantic_version_manual,
         LGA_auto, LGA_manual,
         LPC_auto, LPC_manual,
         score_auto, score_manual,
         status_auto, status_manual,
         ccne1_cn_auto, ccne1_cn_manual,
         rad51b_cn_auto, rad51b_cn_manual,
         coverage_auto, coverage_manual,
         pct_mapped_reads_auto, pct_mapped_reads_manual,
         pct_tum_cell_auto, pct_tum_cell_manual,
         gi_confidence_auto, gi_confidence_manual,
         low_tumor_fraction_auto, low_tumor_fraction_manual,
         repeat_sample_auto, repeat_sample_manual) |> 
  mutate(outcome = case_when(
    status_auto == status_manual ~"Same",
    TRUE ~"Different"))

auto_vs_manual_df_long <- rbind(manual_prep_data,
                                auto_prep_data) |> 
  filter(labno %in% manual_prep_data$labno)

write_csv(auto_vs_manual_df_wide, file = paste0(data_path,
                                           "validation/DOC6588_manual_library_prep/",
                                           "collated_data/",
                                           "DOC6588_automated_vs_manual_results.csv"))

auto_vs_manual_summary <- auto_vs_manual_df_wide |> 
  filter(repeat_sample_auto != "repeat") |> 
  select(labno, 
         worksheet_auto, worksheet_manual,
         LGA_auto, LGA_manual,
         LPC_auto, LPC_manual,
         score_auto, score_manual,
         status_auto, status_manual)

write_csv(auto_vs_manual_summary, file = paste0(data_path,
                                           "validation/DOC6588_manual_library_prep/",
                                           "collated_data/",
                                           "auto_vs_manual_summary.csv"))

```

{{< pagebreak >}}

# Results

## Overall results

Quality control: all samples had over 0.5X coverage. All samples except
23016526 had DNA concentrations greater than 3.3 ng/ul.

```{r}
#| label: overall-results
#| include: FALSE

overall_results <- auto_vs_manual_df_wide |> 
  filter(repeat_sample_auto != "repeat" &
           repeat_sample_manual != "repeat") |> 
  select(labno, score_auto, score_manual,
         status_auto, status_manual, outcome) |>  
  mutate(
    score_auto = round(score_auto, 2),
    score_manual = round(score_manual, 2)) |> 
  arrange(outcome, status_auto)

stopifnot(length(setdiff(labno_vector, overall_results$labno)) == 0)

```

In total, 
`r nrow(overall_results[overall_results$outcome == "Same", ])` samples had the
same HRD status on the manual library preparation as on the automated 
preparation, with
`r nrow(overall_results[overall_results$outcome == "Different", ])` 
samples having different HRD statuses.

The samples with discrepant results are shown in @tbl-discrepant-results. 
2 samples had improved confidence in genomic instability scores using the 
manual method, which changed the overall HRD status from "Non-conclusive" to
"Positive" and "Negative". The threshold for classifying samples as 
"non-conclusive" is a genomic instability score of 0.85 or below.

```{r}
#| label: tbl-discrepant-results
#| tbl-cap: "Discrepant results"
#| echo: FALSE

discrepant_results <- auto_vs_manual_df_wide |> 
  filter(outcome == "Different") |> 
  mutate(gi_confidence_auto = round(gi_confidence_auto, 2),
         gi_confidence_manual = round(gi_confidence_manual, 2)) |> 
  select(labno, score_auto, score_manual,
         gi_confidence_auto, gi_confidence_manual,
         status_auto, status_manual) |> 
  mutate(status_auto = factor(status_auto, levels = c(
    "Non-conclusive", "Negative", "Positive"
  ))) |> 
  arrange(status_auto)

knitr::kable(discrepant_results)

```

```{r}
#| label: make-plots
#| include: FALSE

plot_auto_v_manual <- function(df, xvar, yvar, axismin, axismax,
                               breaks, xlabel, ylabel, title) {
  
  plot <- df |> 
    ggplot(aes(x = {{ xvar }}, y = {{ yvar }})) +
      geom_point(shape = 21, size = 3) +
      geom_abline(linetype = "dashed") +
      theme_bw() +
      theme(legend.position = "none") +
      scale_x_continuous(breaks = breaks,
                         limits = c(axismin, axismax)) +
      scale_y_continuous(breaks = breaks,
                         limits = c(axismin, axismax)) +
    labs(x = xlabel, y = ylabel, 
         title = title)
  
  return(plot)
  
}

data_without_repeats <- auto_vs_manual_df_wide |> 
  filter(repeat_sample_auto != "repeat" &
           repeat_sample_manual != "repeat") 

lga_plot <- plot_auto_v_manual(df = data_without_repeats,
                               xvar = LGA_auto, yvar = LGA_manual,
                               0, 40,
                               seq(0, 40, by = 10),
                               xlabel = "Automated",
                               ylabel = "Manual",
                               title = "LGA")

lpc_plot <- plot_auto_v_manual(df = data_without_repeats,
                               xvar = LPC_auto, yvar = LPC_manual,
                               0, 40,
                               seq(0, 40, by = 10),
                               xlabel = "Automated",
                               ylabel = "Manual",
                               title = "LPC")

score_plot <- plot_auto_v_manual(df = data_without_repeats,
                               xvar = score_auto, yvar = score_manual,
                               0, 1,
                               seq(0, 1, by = 0.1),
                               xlabel = "Automated",
                               ylabel = "Manual",
                               title = "HRD score")

coverage_plot <- plot_auto_v_manual(df = data_without_repeats,
                               xvar = coverage_auto, yvar = coverage_manual,
                               0, 3,
                               seq(0, 3, by = 0.5),
                               xlabel = "Automated",
                               ylabel = "Manual",
                               title = "Coverage")
  
gi_conf_plot <- plot_auto_v_manual(df = data_without_repeats,
                               xvar = gi_confidence_auto, 
                               yvar = gi_confidence_manual,
                               0.65, 1,
                               seq(0.65, 1, by = 0.05),
                               xlabel = "Automated",
                               ylabel = "Manual",
                               title = "GI confidence")

pct_mapped_plot <- plot_auto_v_manual(df = data_without_repeats,
                               xvar = pct_mapped_reads_auto, 
                               yvar = pct_mapped_reads_manual,
                               0.9, 1,
                               seq(0.9, 1, by = 0.02),
                               xlabel = "Automated",
                               ylabel = "Manual",
                               title = "Percent mapped reads")

ccne1_plot <- plot_auto_v_manual(df = data_without_repeats,
                               xvar = ccne1_cn_auto, 
                               yvar = ccne1_cn_manual,
                               0, 12,
                               seq(0, 12, by = 2),
                               xlabel = "Automated",
                               ylabel = "Manual",
                               title = "CCNE1 copy number")

rad51b_plot <- plot_auto_v_manual(df = data_without_repeats,
                               xvar = rad51b_cn_auto, 
                               yvar = rad51b_cn_manual,
                               0, 4,
                               seq(0, 4, by = 1),
                               xlabel = "Automated",
                               ylabel = "Manual",
                               title = "RAD51B copy number")

low_tumour_plot <- plot_auto_v_manual(df = data_without_repeats,
                               xvar = low_tumor_fraction_auto, 
                               yvar = low_tumor_fraction_manual,
                               0, 6,
                               seq(0, 6, by = 1),
                               xlabel = "Automated",
                               ylabel = "Manual",
                               title = "Low tumour fraction")

```

```{r}
#| label: fig-comparison-plots1
#| fig-cap: "Comparison of metrics from automated and manual library preparation methods."
#| fig-height: 8
#| echo: FALSE

ggarrange(plotlist = list(lga_plot, lpc_plot, 
                          score_plot, gi_conf_plot),
          nrow = 2, 
          ncol = 2,
          common.legend = TRUE,
          legend = "bottom"
          )

```

{{< pagebreak >}}

```{r}
#| label: fig-comparison-plots2
#| fig-cap: "Comparison of metrics from automated and manual library preparation methods."
#| fig-height: 8
#| echo: FALSE

ggarrange(plotlist = list(coverage_plot, pct_mapped_plot, 
                          ccne1_plot, rad51b_plot, 
                          low_tumour_plot),
          nrow = 3, 
          ncol = 2,
          common.legend = TRUE,
          legend = "bottom"
          )

```

{{< pagebreak >}}

## Variation

```{r}
#| label: fig-lga-lpc-results
#| fig-cap: "LGA and LPC results"
#| fig-height: 8
#| echo: FALSE

make_lga_lpc_facet <- function(df) {
  
  plot <- ggplot(df, aes(x = LGA, y = LPC)) +
    geom_point(size = 2, shape = 1) +
    theme_bw() +
    theme(legend.position = "bottom") +
    geom_segment(
      data = line_df,
      mapping = aes(x = x, y = y, xend = xend, yend = yend)
    ) +
    geom_point(data = df |> 
                 filter(library_prep == "manual"),
               shape = 21, fill = "red") +
    ylim(0, 42) +
    xlim(0, 42) +
    labs(x = "Large genomic alterations", 
         y = "Loss of parental copy",
         shape = "Library preparation") 
  
  return(plot)
  
}

facet_plot1 <- make_lga_lpc_facet(auto_vs_manual_df_long |> 
                     filter(labno %in% labno_vector[1:12])) +
  facet_wrap(~labno, ncol = 3)

facet_plot1

```

{{< pagebreak >}}

```{r}
#| label: fig-lga-lpc-results2
#| fig-cap: "LGA and LPC results"
#| fig-height: 8
#| echo: FALSE

facet_plot2 <- make_lga_lpc_facet(auto_vs_manual_df_long |> 
                     filter(labno %in% labno_vector[13:length(labno_vector)])) +
  facet_wrap(~labno, ncol = 3)

facet_plot2

```

## Variation due to sample genotype

The variation observed is influenced by the size of the copy number segments
within the sample.

Samples with larger copy number segments have less variation when repeated, and
less variation between the manual and automated methods (example: 20127786).

Conversely, samples with smaller copy number segments are more impacted by 
repeat variation (example: 21003549).

It's similar to uncertainty of measurement for repeat expansions: the 
variation is much less for small alleles, but when the expansion gets big there
is more variation (but it's not as important - either way, the expansion is big,
so the clinical outcome is the same).

23016526: low DNA input. False negative on original SeqOne validation. Still a 
false negative when tested by the manual method.

# Discussion

# Conclusion

